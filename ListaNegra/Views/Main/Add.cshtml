@model ListaNegra.Models.ListItemModel

@{
    ViewBag.Title = "Agregar un nuevo reporte";
}

<style>
    .form-group label{
        font-weight:bolder;
    }
</style>

<div id="ManageAddController">
    <h2>@ViewBag.Title</h2>

    <div class="jumbotron">
        <p>
            Aqui vas a generar tu reporte con las siguientes caracteristicas y reglas : <br />
            * Compartenos tu historia y ayuda a mas gente en no caer en estos tipos de estafas
            * Esta pagina es con fin de llevar un historial de fraudes grandes como Cheque sin fondos al comprar auto, depositos de renta que resultan fraude, empresas fantasmas, fraudes en fin, rentas que no devuelven depositos, etc <br />
            * No poner en la pagina fotos directas del defraudador usa el campo de fuente original para hacer una publicacion completa en cualquier sitio ajeno (Facebook, Twitter, tu pagina, etc)<br />
            * No mencionar nombre completo sino abreviaturas en tu description del defraudador para evitar problemas por "difamacion", con tu historia la gente razonara el defraudador<br />
            * Ser claro y consizo mas entendible tu description, a mas gente comprenderas y evitar ser defraudados <br />
            * Lista Negra no resuelve tu caso, es meramente informativo como registro, cada autor es responsable de su publicacion y ajeno al sitio<br />
        </p>
    </div>

    @using (Html.BeginForm("AddNewReport", "Main", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

<div class="row">
    <div class="col-12 p-3">
        <div class="form-group">
            @Html.LabelFor(x => x.Title, "Titulo")
            @Html.TextBoxFor(x => x.Title, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.Title)
        </div>
    </div>
    <div class="col-12 p-3">
        <div class="form-group">
            @Html.LabelFor(x => x.ListName, "Nombre del defraudador")
            @Html.TextBoxFor(x => x.ListName, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.ListName)
        </div>
    </div>
    <div class="col-12 p-3">
        <div class="form-group">
            @Html.LabelFor(x => x.Description, "Pon una description de la fraude")
            @Html.TextAreaFor(x => x.Description,25, 100, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => x.Description)
        </div>
    </div>

    <div class="col-12 p-3">
        Selecciona en el mapa el lugar del fraude o si no es relacionado a un punto especifico posicionalo en la ciudad del hecho.
        <div class="input-group">

            <div id="map"></div>
        </div>
    </div>
    <input type="hidden" name="@Html.NameFor(x => x.Latitude)" v-model="Latitude" />
    <input type="hidden" name="@Html.NameFor(x => x.Longitude)" v-model="Longitude" />

    <div class="col-12 p-3">
        <div class="form-group">
            <label>Palabras clave</label>
            <template>
                <div class="tags">
                    <vue-tag-input v-model="tag"
                                   :tags="tags"
                                   :autocomplete-items="filteredItems"
                                   @@tags-changed="newTags => tags = newTags" />
                </div>
            </template>
        </div>
    </div>
    <div class="col-12 p-3">
        <div class="form-group">
            <label>Agregar Imagenes externas</label>
            <small>Puedes agregar url a imagenes de tu caso</small>
            <div class="input-group">
                <input class="form-control"/>
                <div class="input-group-append">
                    <a class="btn btn-success text-light"><span class="material-icons font-size-unset">add_photo_alternate</span></a>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 p-3">
        <div class="col-md-3 col-lg-2 col-xl-1">
            <a class="btn btn-primary">Crear</a>
        </div>
    </div>
</div>
    }
</div>

<style>
 
    .vue-tags-input {
        max-width: none !important;
        width: 100%;
    }
</style>



<script>
    require(['vue', 'openlayers', 'tag-input-vue', 'vuetify'], (Vue, ol, vuetag, Vuetify) => {

        var $app = new Vue({
            el: '#ManageAddController',
            vuetify : new Vuetify(),
            components: {
                'vue-tag-input' : vuetag.default
            },
            data: {
                map : null,
                source : null,
                layer : null,
                marker : null,
                OL_Proj: ol.proj,
                tag:  '',
                tags: [],
                filteredItems: [{ text: 'Spain' }],
            },
            methods: {
                initMap: function() {

                    this.map = new ol.Map({
                        target: 'map',
                        layers: [
                            new ol.layer.Tile({
                                source: new ol.source.OSM()
                            })
                        ],
                        view: new ol.View({
                            center: ol.proj.fromLonLat([-103.349609, 20.659698]),
                            zoom: 10
                        })
                    });

                    this.source = new ol.source.Vector({});
                    this.layer = new ol.layer.Vector({
                        source: this.source,
                        style: new ol.style.Style({
                            image: new ol.style.Icon({
                                src: 'https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/Map_marker_font_awesome.svg/200px-Map_marker_font_awesome.svg.png',
                                anchor: [0.5, 1],
                                scale: .25
                            }),
                        })
                    });
                    this.map.addLayer(this.layer);

                    this.map.on("click", (e) => {

                        let newProj = this.OL_Proj.toLonLat(e.coordinate);
                        console.log(newProj);
                        this.marker && this.$data.source.removeFeature(this.marker);

                        this.marker = new ol.Feature({
                            geometry: new ol.geom.Point(e.coordinate) // dont worry about coordinate type 0,0 will be in west coast of africa
                        });

                        this.source.addFeature($app.marker);
                    }); // click event map

                }
            },
            mounted: function () {
                this.initMap();
            }

        });

        // components

        //export default {
        //  components: {
        //    vuetag,
        //  },
        //  data() {
        //    return {
        //      tag: '',
        //      tags: [],
        //      autocompleteItems: [{
        //        text: 'Spain',
        //      }, {
        //        text: 'France',
        //      }, {
        //        text: 'USA',
        //      }, {
        //        text: 'Germany',
        //      }, {
        //        text: 'China',
        //      }],
        //    };
        //  },
        //  computed: {
        //    filteredItems() {
        //      return this.autocompleteItems.filter(i => {
        //        return i.text.toLowerCase().indexOf(this.tag.toLowerCase()) !== -1;
        //      });
        //    },
        //  },
        //};
    });
</script>


@*important*@

@*var currentPoint = new Point(routeCoords[index]);
var feature = new Feature(currentPoint);
vectorContext.drawFeature(feature, styles.geoMarker);*@